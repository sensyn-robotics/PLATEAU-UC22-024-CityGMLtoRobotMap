{
  "index.html": {
    "href": "index.html",
    "title": "CityGMLtoRobotMap | PLATEAU CityGMLtoRobotMap",
    "keywords": "CityGMLtoRobotMap 「CityGMLtoRobotMap」はCityGMLをRobotが自己位置推定などで使用できる環境地図として変換するためのツール群です。CityGMLからOBJ形式への形式変換・座標変換の機能、OBJファイルの表面をサンプリングして点群を生成できる機能、BIMとCityGMLのマージ機能があります。"
  },
  "manual/EXAMPLE.html": {
    "href": "manual/EXAMPLE.html",
    "title": "サンプルデータを使った使用例・手順 | PLATEAU CityGMLtoRobotMap",
    "keywords": "サンプルデータを使った使用例・手順 手順概要 CityGMLをobjに変換 CityGML生成したobjを点群化 BIM(ifc)をobjに変換 CityGMLとBIMの位置合わせを行う(パターン１、パターン２) CityGML生成したobjから特定の建物を取り除く 複数の点群を一つの点群にまとめる (sample_resource内のzipファイルを全て解凍してください) 1. CityGMLをobjに変換 # conver building information python gml2obj.py -s ./sample_resource/city_gml/udx/ --lat 35.4987030455 --lon 139.72337047 --alt 38.5293235779 --mapcode_level third # convert dem （Digital Elevation Model） python gml2obj.py -s ./sample_resource/city_gml/udx/dem/533915_dem_6697.gml --lat 35.4987030455 --lon 139.72337047 --alt 38.5293235779 2. CityGML生成したobjを点群化 python create_sampling_point_cloud.py -f $HOME/CG2RM/obj/53391597_bldg_6697.obj --density 10 python create_sampling_point_cloud.py -f $HOME/CG2RM/obj/533915_dem_6697.obj --density 1 -x 250 -y 250 3. BIM(ifc)をobjに変換 ./IfcConvert sample_resource/bim/warehouse.ifc ~/CG2RM/obj/warehouse.obj 4. CityGMLとBIMの位置合わせを行う (パターン１) blender を使ってある程度位置合わせた後、プログラムによるCityGMLとBIMの位置合わせを行います blender を使ってある程度位置合わせを行う [File]>[Import]>[Wavefront(.obj)] Up Axis をZにする 対象の建築物を選択 対象の建築物を移動（移動方法はBlenderの操作方法参照） [File]>[Export]>[Wavefront(.obj)] Up AxisをZにして warehouse_trans.obj という名前で保存。\"$HOME/CG2RM/obj\"に移動させる プログラムによる位置合わせを行います。 下記コマンドを実行することでCityGMLが持つ座標系に合うように位置調整したBIMが結果として得られます。 モデルの形状の違いなどの要因により自動調整には限界があります。うまく一致しない場合はBlenderなどのソフトを使って手動で調整する方が良い結果を得られる可能性があります。 python create_sampling_point_cloud.py -f $HOME/CG2RM/obj/warehouse_trans.obj --density 10 python align_bim.py --source ~/CG2RM/pointcloud/warehouse_trans_sample.ply --target ~/CG2RM/pointcloud/53391597_bldg_6697_sample.ply 赤く表示されているモデルは初期位置。黄色く表示されているモデルはプログラムにより自動調整された後のモデル位置。 位置変換後の結果obj,ply,pcdは\"~/CG2RM/transformed\"内に保存されます。 4. CityGMLとBIMの位置合わせを行う (パターン２) 事前にBlenderを使って手動で位置合わせしたモデルを使います # ./sample_resource/bim/warehouse_trans.obj は事前にblenderで位置調整したモデルです。 python create_sampling_point_cloud.py -f ./sample_resource/bim/warehouse_trans.obj --density 10 5. CityGML生成したobjから特定の建物を取り除く blender UI上で削除対象建築物を左クリックで選択 [delete]keyで削除 [A]を押すと残りのオブジェクト全選択 [File]>[Export]>[Wavefront(.obj)] Up AxisをZにして 53391597_bldg_6697_removed.obj という名前で\"$HOME/CG2RM/obj/\"に保存 特定の建築物を取り除いたObjの点群を生成します python create_sampling_point_cloud.py -f $HOME/CG2RM/obj/53391597_bldg_6697_removed.obj --density 10 6. 複数の点群をマージする python merge_multi_point_cloud.py -f ~/CG2RM/pointcloud/warehouse_trans_sample.pcd ~/CG2RM/pointcloud/53391597_bldg_6697_removed_sample.pcd ~/CG2RM/pointcloud/533915_dem_6697_sample.pcd"
  },
  "manual/Install.html": {
    "href": "manual/Install.html",
    "title": "環境構築・インストール | PLATEAU CityGMLtoRobotMap",
    "keywords": "環境構築・インストール 必要動作環境: Ubuntu18, Python3.8 1. 依存ライブラリのインストール sudo apt install -y build-essential libffi-dev libssl-dev zlib1g-dev liblzma-dev libbz2-dev libreadline-dev libsqlite3-dev libncurses5-dev libncursesw5-dev tk-dev sudo apt install -y curl wget git default-jre 2. pyenv と Python3.8 のインストール Python3.8環境を導入するためにここではpyenvを紹介しますが、他の方法でも問題ありません。 pyenvをダウンロード curl https://pyenv.run | bash pyenv 環境変数を設定、アクティベート echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bashrc echo 'command -v pyenv >/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bashrc echo 'eval \"$(pyenv init -)\"' >> ~/.bashrc source ~/.bashrc 特定バージョンのPythonをインストールし、アクティベートする pyenv install 3.8.13 # 3.8.13をシステム全体で使いたい場合は global optionを使う pyenv global 3.8.13 # 3.8.13を特定のディレクトリ内だけで使いたい場合は、環境を使用したいディレクトリ内で local optionを使う pyenv local 3.8.13 python -V pip install --upgrade pip 3. CityGMLtoRobotMap のインストール CityGMLtoRobotMapをクローンします git clone https://github.com/sensyn-robotics/PLATEAU-UC22-024-CityGMLtoRobotMap CityGMLtoRobotMap cd ./CityGMLtoRobotMap citygml-toolsをダウンロードします wget --content-disposition https://github.com/citygml4j/citygml-tools/releases/download/v2.0.0/citygml-tools-2.0.0.zip unzip citygml-tools-2.0.0.zip IfcConverterをダウンロードします （BIMを使う場合） （ubuntu18で動作確認できたバージョンを記載しています） wget --content-disposition https://s3.amazonaws.com/ifcopenshell-builds/IfcConvert-v0.6.0-0087fa8-linux64.zip unzip IfcConvert-*-linux64.zip CityGMLtoRobotMap が必要とする Python依存ライブラリを Poetryを用いてインストールします pip install poetry poetry install # poetry環境へ切り替えます poetry shell"
  },
  "manual/README.html": {
    "href": "manual/README.html",
    "title": "Introduction | PLATEAU CityGMLtoRobotMap",
    "keywords": "Introduction CityGMLtoRobotMap 「CityGMLtoRobotMap」はCityGMLをRobotが自己位置推定などで使用できる環境地図として変換するためのツール群です。CityGMLからOBJ形式への形式変換・座標変換の機能、OBJファイルの表面をサンプリングして点群を生成できる機能、BIMとCityGMLのマージ機能があります。"
  },
  "manual/Usage.html": {
    "href": "manual/Usage.html",
    "title": "各ツール使用方法・手順 | PLATEAU CityGMLtoRobotMap",
    "keywords": "各ツール使用方法・手順 CityGMLをobjに変換する機能 obj から点群を生成する機能 BIM(ifc)をobjに変換する機能 CityGMLとBIMの位置合わせを行う機能 複数の点群を一つの点群にまとめる機能 (注意：poetryにより構築したpython環境を使うためにはpoetry shellを実行しpoetry環境をactivateする必要があります。) 準備 CityGML形式のデータが必要です。 3D都市モデル（Project PLATEAU）東京都23区からCityGML形式のデータをダウンロードし解凍してください。 または、* Example にあるようにレポジトリ内にあるサンプルデータを使ってください。 また、東京都以外の都市データも公開されています。3D都市モデル（Project PLATEAU）ポータルサイト 1.CityGMLをobjに変換 以下を実行すると$HOME/CG2RM/obj の中にCityGMLから変換されたobjファイルが生成されます。$HOME/CG2RM/objはプログラムが自動的に作成します。 ここでは「~/Downlods/plateau-tokyo23ku」にデータがあると想定してツール使用時のコマンドを記述します。 指定している緯度経度は 【東京都庁所在地】 緯度：35.6895014 経度：139.6917337 高さ：0 となっています。 python gml2obj.py -s ~/Downlods/plateau-tokyo23ku/udx --lat 35.6895014 --lon 139.6917337 --alt 30 --mapcode＿level third オプション usage: gml2obj.py [-h] -s SOURCE_DIR --lat LAT --lon LON --alt ALT [--save_dir SAVE_DIR] [-u] [--mapcode_level {first,second,third}] [--lod {max,1,2,3,4}] optional arguments: -h, --help show this help message and exit -s SOURCE_DIR, --source_dir SOURCE_DIR CityGMLを含むディレクトリか、CityGMLファイルを渡してください。ディレクトリであれば自動で内部のCityGMLを探します。 --lat LAT Latitude 緯度 --lon LON Longitude 経度 --alt ALT Altitude 高さ --save_dir SAVE_DIR -u, --update 中間生成ファイルを上書きします --mapcode_level {first,second,third} 変換対象エリアを定めます。1次メッシュ、2次メッシュ、3次メッシュ --lod {max,1,2,3,4} 一つの建物が複数のLODを持つ場合、maxを指定すると一番レベルが高いものを抽出。1,2,3,4いずれかであれば指定のレベルのLODのみ抽出します。 大まかな処理の流れ 指定した緯度経度を含む地域メッシュコードを特定 対象のメッシュコードを含むファイルを探索・特定 指定したlod level情報を抽出 指定した緯度経度を原点とした3d情報へと変換 objファイルへ変換・保存 地域メッシュについて(https://nlftp.mlit.go.jp/ksj/old/old_data_mesh.html) 次のコマンドを使用することで生成したobjファイルを表示することができます。 python view_obj.py $HOME/CG2RM/obj_file.obj 2.obj から点群生成 生成したobjファイルのメッシュ表面をサンプリングすることで点群を生成します。densityは面積あたりにサンプリングする点群の数の目安です。 コマンドを実行すると$HOME/CG2RM/pointcloud の中にply,とpcdファイルが生成されます。plyファイルはcloud comapreなどで表示して確認が可能です。 python create_sampling_point_cloud.py -f $HOME/CG2RM/obj/obj_file.obj --density 30 オプション usage: create_sampling_point_cloud.py [-h] -f POINT_CLOUD_FILES [POINT_CLOUD_FILES ...] [--save_dir SAVE_DIR] [-d DENSITY] optional arguments: -h, --help show this help message and exit -f POINT_CLOUD_FILES 変換対象のobjファイルのパス。同時に複数指定できます。 --save_dir SAVE_DIR -d DENSITY, --density DENSITY 面積あたりにサンプリングする点群の数 -x X 対象メッシュの範囲を制限する x[m] デフォルトでは動作しない -y Y 対象メッシュの範囲を制限する y[m] デフォルトでは動作しない 3.BIMを使う場合）BIMをobj・点群に変換 BIMをobjに変換する場合はIfcConvertを使用します。以下のようにコマンドで変換を行います。 ./IfcConvert input_bim.ifc output_obj.obj objに変換された後は、2と同様に点群への変換が可能です。 4.（BIMを使う場合）obj(CityGMLから)とobj(BIM)の位置合わせを行う 位置合わせを行いたいCityGMLとBIMとそれぞれから生成された点群を指定し python align_bim.py --source ~/CG2RM/pointcloud/bim_model.ply --target ~/CG2RM/pointcloud/CityGML_model.ply オプション usage: align_bim.py [-h] --source SOURCE --target TARGET [--save_dir SAVE_DIR] [--offset [OFFSET [OFFSET ...]]] optional arguments: -h, --help show this help message and exit --source SOURCE 位置を変化させて位置合わせを行いたい点群 --target TARGET 位置合わせの基準となる点群 --save_dir SAVE_DIR --offset [x,y,z,ywa,roll,pitch] 位置合わせ前にオフセットさせる際の値 コマンドを実行することでCityGMLが持つ座標系に合うように位置調整したBIMが結果として得られます。 自動調整には限界があるため、うまく一致しない場合はBlenderなどのソフトを使って手動で調整することも可能です。 5.複数の点群を一つの点群にまとめる 複数の点群ファイルを一つに統一する場合、以下のようにコマンドを実行することで統合することが可能です。 python3 merge_multi_point_cloud.py -f file_1.pcd file_2.pcd ... オプション usage: merge_multi_point_cloud.py [-h] -f POINT_CLOUD_FILES [POINT_CLOUD_FILES ...] [-t {ply,pcd}] [--save_dir SAVE_DIR] optional arguments: -h, --help show this help message and exit -f POINT_CLOUD_FILES 統合したい点群ファイルのリスト -n NAME, --name NAME --save_dir SAVE_DIR"
  }
}